// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using cbcmSchema.InstalledAppDevices;
//
//    var extensionInstallDeviceReport = ExtensionInstallDeviceReport.FromJson(jsonString);

namespace cbcmSchema.InstalledAppDevices
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ExtensionInstallDeviceReport
    {
        [JsonProperty("devices", NullValueHandling = NullValueHandling.Ignore)]
        public List<Device> Devices { get; set; }

        [JsonProperty("nextPageToken", NullValueHandling = NullValueHandling.Ignore)]
        public string NextPageToken { get; set; }

        [JsonProperty("totalSize", NullValueHandling = NullValueHandling.Ignore)]
        public long? TotalSize { get; set; }
    }

    public partial class Device
    {
        [JsonProperty("deviceId", NullValueHandling = NullValueHandling.Ignore)]
        public string DeviceId { get; set; }

        [JsonProperty("machine", NullValueHandling = NullValueHandling.Ignore)]
        public string Machine { get; set; }
    }

    public partial class ExtensionInstallDeviceReport
    {
        public static ExtensionInstallDeviceReport FromJson(string json) => JsonConvert.DeserializeObject<ExtensionInstallDeviceReport>(json, cbcmSchema.InstalledAppDevices.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ExtensionInstallDeviceReport self) => JsonConvert.SerializeObject(self, cbcmSchema.InstalledAppDevices.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
