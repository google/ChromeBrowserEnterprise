// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using cbcmSchema.ApplicationException;
//
//    var responseException = ResponseException.FromJson(jsonString);

namespace cbcmSchema.ApplicationException
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ResponseException
    {
        [JsonProperty("error", NullValueHandling = NullValueHandling.Ignore)]
        public ResponseExceptionError Error { get; set; }
    }

    public partial class ResponseExceptionError
    {
        [JsonProperty("code", NullValueHandling = NullValueHandling.Ignore)]
        public long? Code { get; set; }

        [JsonProperty("message", NullValueHandling = NullValueHandling.Ignore)]
        public string Message { get; set; }

        [JsonProperty("errors", NullValueHandling = NullValueHandling.Ignore)]
        public List<ErrorElement> Errors { get; set; }
    }

    public partial class ErrorElement
    {
        [JsonProperty("message", NullValueHandling = NullValueHandling.Ignore)]
        public string Message { get; set; }

        [JsonProperty("domain", NullValueHandling = NullValueHandling.Ignore)]
        public string Domain { get; set; }

        [JsonProperty("reason", NullValueHandling = NullValueHandling.Ignore)]
        public string Reason { get; set; }
    }

    public partial class ResponseException
    {
        public static ResponseException FromJson(string json) => JsonConvert.DeserializeObject<ResponseException>(json, cbcmSchema.ApplicationException.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ResponseException self) => JsonConvert.SerializeObject(self, cbcmSchema.ApplicationException.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
