// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using cbcmSchema.Spin;
//
//    var spinRiskItem = SpinRiskItem.FromJson(jsonString);

namespace cbcmSchema.Spin
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class SpinRiskItem
    {
        [JsonProperty("details", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Details { get; set; }

        [JsonProperty("trustRate", NullValueHandling = NullValueHandling.Ignore)]
        public long? TrustRate { get; set; }

        [JsonProperty("appVersion", NullValueHandling = NullValueHandling.Ignore)]
        public string AppVersion { get; set; }

        public override string ToString()
        {
            return String.Format("spinai:{0}", this.TrustRate.HasValue ? this.TrustRate.Value.ToString() : String.Empty);
        }
    }

    public partial class SpinRiskItem
    {
        public static SpinRiskItem FromJson(string json) => JsonConvert.DeserializeObject<SpinRiskItem>(json, cbcmSchema.Spin.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this SpinRiskItem self) => JsonConvert.SerializeObject(self, cbcmSchema.Spin.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
