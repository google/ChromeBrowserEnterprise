// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using cbcmSchema.ExtensionPolicy;
//
//    var extensionMgmtPolicy = ExtensionMgmtPolicy.FromJson(jsonString);

namespace cbcmSchema.ExtensionPolicy
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ExtensionMgmtPolicy
    {
        [JsonProperty("requests", NullValueHandling = NullValueHandling.Ignore)]
        public List<Request> Requests { get; set; }
    }

    public partial class Request
    {
        [JsonProperty("policyTargetKey", NullValueHandling = NullValueHandling.Ignore)]
        public PolicyTargetKey PolicyTargetKey { get; set; }

        [JsonProperty("policyValue", NullValueHandling = NullValueHandling.Ignore)]
        public PolicyValue PolicyValue { get; set; }

        [JsonProperty("updateMask", NullValueHandling = NullValueHandling.Ignore)]
        public UpdateMask UpdateMask { get; set; }
    }

    public partial class PolicyTargetKey
    {
        [JsonProperty("targetResource", NullValueHandling = NullValueHandling.Ignore)]
        public string TargetResource { get; set; }

        [JsonProperty("additionalTargetKeys", NullValueHandling = NullValueHandling.Ignore)]
        public AdditionalTargetKeys AdditionalTargetKeys { get; set; }
    }

    public partial class AdditionalTargetKeys
    {
        [JsonProperty("app_id", NullValueHandling = NullValueHandling.Ignore)]
        public string AppId { get; set; }
    }

    public partial class PolicyValue
    {
        [JsonProperty("policySchema", NullValueHandling = NullValueHandling.Ignore)]
        public string PolicySchema { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public Value Value { get; set; }
    }

    public partial class Value
    {
        /// <summary>
        /// Valid aoo install type: {"ALLOWED", "FORCED", "BLOCKED"}
        /// </summary>
        [JsonProperty("appInstallType", NullValueHandling = NullValueHandling.Ignore)]
        public string AppInstallType { get; set; }
    }

    public partial class UpdateMask
    {
        [JsonProperty("paths", NullValueHandling = NullValueHandling.Ignore)]
        public string Paths { get; set; }
    }

    public partial class ExtensionMgmtPolicy
    {
        public static ExtensionMgmtPolicy FromJson(string json) => JsonConvert.DeserializeObject<ExtensionMgmtPolicy>(json, cbcmSchema.ExtensionPolicy.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ExtensionMgmtPolicy self) => JsonConvert.SerializeObject(self, cbcmSchema.ExtensionPolicy.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
