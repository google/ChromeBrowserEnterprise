// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using cbcmSchema.Extension;
//
//    var extensionItem = ExtensionItem.FromJson(jsonString);

namespace cbcmSchema.Extension
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ExtensionItem
    {
        [JsonProperty("UnverifiedExtensionId", NullValueHandling = NullValueHandling.Ignore)]
        public string UnverifiedExtensionId {  get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("displayName", NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("appId", NullValueHandling = NullValueHandling.Ignore)]
        public string AppId { get; set; }

        [JsonProperty("revisionId", NullValueHandling = NullValueHandling.Ignore)]
        public string RevisionId { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("iconUri", NullValueHandling = NullValueHandling.Ignore)]
        public Uri IconUri { get; set; }

        [JsonProperty("detailUri", NullValueHandling = NullValueHandling.Ignore)]
        public Uri DetailUri { get; set; }

        [JsonProperty("firstPublishTime", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? FirstPublishTime { get; set; }

        [JsonProperty("latestPublishTime", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LatestPublishTime { get; set; }

        [JsonProperty("publisher", NullValueHandling = NullValueHandling.Ignore)]
        public string Publisher { get; set; }

        [JsonProperty("homepageUri", NullValueHandling = NullValueHandling.Ignore)]
        public Uri HomepageUri { get; set; }

        [JsonProperty("privacyPolicyUri", NullValueHandling = NullValueHandling.Ignore)]
        public Uri PrivacyPolicyUri { get; set; }

        [JsonProperty("reviewNumber", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? ReviewNumber { get; set; }

        [JsonProperty("reviewRating", NullValueHandling = NullValueHandling.Ignore)]
        public double? ReviewRating { get; set; }

        [JsonProperty("error", NullValueHandling = NullValueHandling.Ignore)]
        public Error Error { get; set; }

        [JsonProperty("chromeAppInfo", NullValueHandling = NullValueHandling.Ignore)]
        public ChromeAppInfo ChromeAppInfo { get; set; }
    }

    public partial class ChromeAppInfo
    {
        [JsonProperty("supportEnabled", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SupportEnabled { get; set; }

        [JsonProperty("minUserCount", NullValueHandling = NullValueHandling.Ignore)]
        public long? MinUserCount { get; set; }

        [JsonProperty("permissions", NullValueHandling = NullValueHandling.Ignore)]
        public List<Permission> Permissions { get; set; }

        [JsonProperty("siteAccess", NullValueHandling = NullValueHandling.Ignore)]
        public List<SiteAccess> SiteAccess { get; set; }

        [JsonProperty("isTheme", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsTheme { get; set; }

        [JsonProperty("googleOwned", NullValueHandling = NullValueHandling.Ignore)]
        public bool? GoogleOwned { get; set; }

        [JsonProperty("isCwsHosted", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsCwsHosted { get; set; }

        [JsonProperty("kioskEnabled", NullValueHandling = NullValueHandling.Ignore)]
        public bool? KioskEnabled { get; set; }

        [JsonProperty("isKioskOnly", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsKioskOnly { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("isExtensionPolicySupported", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsExtensionPolicySupported { get; set; }
    }

    public partial class Permission
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("documentationUri", NullValueHandling = NullValueHandling.Ignore)]
        public Uri DocumentationUri { get; set; }

        [JsonProperty("accessUserData", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AccessUserData { get; set; }
    }

    public partial class SiteAccess
    {
        [JsonProperty("hostMatch", NullValueHandling = NullValueHandling.Ignore)]
        public string HostMatch { get; set; }
    }

    public partial class Error
    {
        [JsonProperty("code", NullValueHandling = NullValueHandling.Ignore)]
        public long? Code { get; set; }

        [JsonProperty("message", NullValueHandling = NullValueHandling.Ignore)]
        public string Message { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }
    }

    public partial class ExtensionItem
    {
        public static ExtensionItem FromJson(string json) => JsonConvert.DeserializeObject<ExtensionItem>(json, cbcmSchema.Extension.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ExtensionItem self) => JsonConvert.SerializeObject(self, cbcmSchema.Extension.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
