// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using cbcmSchema.InstalledAppsReport;
//
//    var extensionInstallReport = ExtensionInstallReport.FromJson(jsonString);

namespace cbcmSchema.InstalledAppsReport
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using cbcmSchema.InstalledAppDevices;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ExtensionInstallReport
    {
        [JsonProperty("installedApps", NullValueHandling = NullValueHandling.Ignore)]
        public List<InstalledApp> InstalledApps { get; set; }

        [JsonProperty("nextPageToken", NullValueHandling = NullValueHandling.Ignore)]
        public string NextPageToken { get; set; }

        [JsonProperty("totalSize", NullValueHandling = NullValueHandling.Ignore)]
        public long? TotalSize { get; set; }
    }

    public partial class InstalledApp : IFormattable
    {
        [JsonProperty("appId", NullValueHandling = NullValueHandling.Ignore)]
        public string AppId { get; set; }

        [JsonProperty("appType", NullValueHandling = NullValueHandling.Ignore)]
        public string AppType { get; set; }

        [JsonProperty("browserDeviceCount", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? BrowserDeviceCount { get; set; }

        [JsonProperty("appInstallType", NullValueHandling = NullValueHandling.Ignore)]
        public string AppInstallType { get; set; }

        [JsonProperty("appSource", NullValueHandling = NullValueHandling.Ignore)]
        public string AppSource { get; set; }

        [JsonProperty("displayName", NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("homepageUri", NullValueHandling = NullValueHandling.Ignore)]
        public Uri HomepageUri { get; set; }

        [JsonProperty("permissions", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Permissions { get; set; }

        [JsonProperty("devices", NullValueHandling = NullValueHandling.Ignore)]
        public List<Device> Devices { get; set; }

        [JsonProperty("version", NullValueHandling = NullValueHandling.Ignore)]
        public string Version { get; set; }

        [JsonProperty("crxcavatorRiskScore", NullValueHandling = NullValueHandling.Ignore)]
        public string CrxcavatorRiskScore { get; set; }

        [JsonProperty("crxcavatorRiskUrl", NullValueHandling = NullValueHandling.Ignore)]
        public Uri CrxcavatorRiskUrl { get; set; }

        [JsonProperty("spinRiskScore", NullValueHandling = NullValueHandling.Ignore)]
        public string SpinRiskScore { get; set; }

        [JsonProperty("spinRiskUrl", NullValueHandling = NullValueHandling.Ignore)]
        public Uri SpinRiskUrl { get; set; }


        public override string ToString()
        {
            return this.ToString("S", CultureInfo.CurrentCulture);
        }

        public string ToString(string format, IFormatProvider formatProvider)
        {
            if (String.IsNullOrEmpty(format)) format = "S";
            if (formatProvider == null) formatProvider = CultureInfo.CurrentCulture;

            switch (format.ToUpperInvariant())
            {
                case "L":
                    //"appId,displayName,version,crxcavatorRiskScore,crxcavatorRiskUrl,spinRiskScore,spinRiskUrl,browserDeviceCount,appInstallType"
                    return String.Format("{0},\"{1}\",{2},{3},{4},{5},{6},{7},{8}",
                        this.AppId,
                        this.DisplayName,
                        this.Version,
                        this.CrxcavatorRiskScore,
                        this.CrxcavatorRiskUrl != null ? this.CrxcavatorRiskUrl.ToString() : String.Empty,
                        this.SpinRiskScore,
                        this.SpinRiskUrl != null ? this.SpinRiskUrl.ToString() : String.Empty,
                        this.BrowserDeviceCount.HasValue ? this.BrowserDeviceCount.Value.ToString() : String.Empty,
                        this.AppInstallType);
                case "S":
                default:
                    return String.Format("{0},{1},crx:{2},spinai:{3}",
                        this.AppId,
                        this.Version,
                        this.CrxcavatorRiskScore,
                        this.SpinRiskScore);

            }
        }
    }

    public partial class Device
    {
        [JsonProperty("deviceId", NullValueHandling = NullValueHandling.Ignore)]
        public string DeviceId { get; set; }

        [JsonProperty("machine", NullValueHandling = NullValueHandling.Ignore)]
        public string Machine { get; set; }

        public override string ToString()
        {
            return this.Machine;
        }
    }

    public partial class ExtensionInstallReport
    {
        public static ExtensionInstallReport FromJson(string json) => JsonConvert.DeserializeObject<ExtensionInstallReport>(json, cbcmSchema.InstalledAppsReport.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ExtensionInstallReport self) => JsonConvert.SerializeObject(self, cbcmSchema.InstalledAppsReport.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }



    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
